<!DOCTYPE html><html lang="pl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Generator Podsumowa≈Ñ Meczu</title>
  <link href="https://fonts.googleapis.com/css2?family=Russo+One&family=Roboto&display=swap" rel="stylesheet">
  <style>
    body {
      margin: 0;
      font-family: 'Roboto', sans-serif;
      background: linear-gradient(145deg, #0a0f24, #1b1f3a);
      color: #fff;
      padding: 2rem;
    }h1 {
  font-family: 'Russo One', sans-serif;
  font-size: 2.5rem;
  margin-bottom: 1rem;
  text-align: center;
  color: #00ffae;
}

.container {
  max-width: 600px;
  margin: auto;
  background-color: #101428;
  padding: 2rem;
  border-radius: 16px;
  box-shadow: 0 0 20px rgba(0, 255, 174, 0.2);
}

label {
  font-weight: bold;
  margin-top: 1rem;
  display: block;
}

input, textarea, select {
  width: 100%;
  padding: 0.75rem;
  margin-top: 0.3rem;
  margin-bottom: 1rem;
  border: none;
  border-radius: 8px;
  background: #1c213b;
  color: #fff;
  font-size: 1rem;
}

button {
  background-color: #00ffae;
  color: #000;
  padding: 0.8rem;
  width: 100%;
  font-size: 1.1rem;
  border: none;
  border-radius: 10px;
  cursor: pointer;
  font-weight: bold;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #00c98e;
}

.output {
  margin-top: 2rem;
  background: #1e2640;
  padding: 1.5rem;
  border-radius: 12px;
  white-space: pre-wrap;
  box-shadow: inset 0 0 10px rgba(0, 255, 174, 0.1);
  font-size: 1.1rem;
  animation: fadeIn 1s ease-in-out;
  min-height: 100px;
}

.live-preview {
  font-style: italic;
  color: #aaa;
  margin-top: 1rem;
  font-size: 0.95rem;
  min-height: 60px;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

@media (max-width: 600px) {
  body {
    padding: 1rem;
  }
}

  </style>
</head>
<body>
  <div class="container">
    <h1>Generator Podsumowa≈Ñ</h1>
    <label>Dru≈ºyna A:<input id="teamA" oninput="liveUpdate()" /></label>
    <label>Dru≈ºyna B:<input id="teamB" oninput="liveUpdate()" /></label>
    <label>Wynik:<input id="score" placeholder="np. 3:2" oninput="liveUpdate()" /></label>
    <label>Strzelcy:<textarea id="scorers" oninput="liveUpdate()"></textarea></label>
    <label>MVP meczu:<input id="mvp" oninput="liveUpdate()" /></label>
    <label>Wydarzenia specjalne:<textarea id="events" oninput="liveUpdate()"></textarea></label>
    <label>Tryb generowania:
      <select id="mode">
        <option value="template">Szablon (offline)</option>
        <option value="ai">AI (OpenRouter)</option>
      </select>
    </label>
    <label>Styl generowania:
      <select id="style">
        <option value="serio">Na serio</option>
        <option value="luz">Na luzie</option>
      </select>
    </label>
    <label>OpenRouter API Key:<input id="apikey" placeholder="Wymagany tylko dla AI" /></label>
    <button onclick="generateSummary()">Generuj podsumowanie</button>
    <div class="live-preview" id="livePreview">PodglƒÖd na ≈ºywo...</div>
    <div class="output" id="summary"></div>
  </div>  <script>
    function generateTemplate(data, style) {
      const teamIcons = { home: "‚öΩ", away: "üèü" };
      const warianty = [
        `${teamIcons.home} ${data.teamA} vs ${data.teamB} ${teamIcons.away}\nWynik: ${data.score}. MVP: ${data.mvp}. ${data.events}`,
        `${data.teamA} i ${data.teamB} rozegrali emocjonujƒÖce spotkanie zako≈Ñczone wynikiem ${data.score}. Strzelcy: ${data.scorers}. MVP: ${data.mvp}.`,
        `Mecz ${data.teamA} - ${data.teamB} zako≈Ñczy≈Ç siƒô wynikiem ${data.score}. ${data.events}`
      ];

      if (style === "luz") {
        warianty[0] = `Ale≈º to by≈Ço starcie! ${data.teamA} i ${data.teamB} dali z siebie wszystko. Wynik ${data.score}, MVP: ${data.mvp}.`;
        warianty[1] = `Gole, emocje i ≈õwietna atmosfera! ${data.teamA} vs ${data.teamB} (${data.score}). ${data.mvp} zagra≈Ç jak profesor!`;
        warianty[2] = `W skr√≥cie: ${data.teamA} vs ${data.teamB}, wynik ${data.score}, MVP: ${data.mvp}. Do zapamiƒôtania!`;
      }

      return warianty[Math.floor(Math.random() * warianty.length)];
    }

    function liveUpdate() {
      const data = getData();
      const style = document.getElementById("style").value;
      const preview = generateTemplate(data, style);
      document.getElementById("livePreview").textContent = preview;
    }

    function getData() {
      return {
        teamA: document.getElementById("teamA").value,
        teamB: document.getElementById("teamB").value,
        score: document.getElementById("score").value,
        scorers: document.getElementById("scorers").value,
        mvp: document.getElementById("mvp").value,
        events: document.getElementById("events").value
      };
    }

    async function generateSummary() {
      const data = getData();
      const mode = document.getElementById("mode").value;
      const style = document.getElementById("style").value;
      const apiKey = document.getElementById("apikey").value;
      const summaryDiv = document.getElementById("summary");
      summaryDiv.textContent = "";

      if (mode === "template") {
        typeText(summaryDiv, generateTemplate(data, style));
      } else {
        if (!apiKey) {
          alert("Wprowad≈∫ klucz API");
          return;
        }
        const prompt = `Napisz podsumowanie meczu pi≈Çki no≈ºnej. Dru≈ºyny: ${data.teamA} vs ${data.teamB}. Wynik: ${data.score}. Strzelcy: ${data.scorers}. MVP: ${data.mvp}. Wydarzenia: ${data.events}. Styl: ${style === 'serio' ? 'powa≈ºny' : 'zabawny'}`;
        try {
          const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
            method: "POST",
            headers: {
              "Authorization": `Bearer ${apiKey}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              model: "gpt-3.5-turbo",
              messages: [{ role: "user", content: prompt }],
              temperature: 0.9
            })
          });
          const json = await response.json();
          if (json.error) {
            summaryDiv.textContent = `B≈ÇƒÖd API: ${json.error.message}`;
          } else {
            const content = json.choices?.[0]?.message?.content || "Brak odpowiedzi od AI";
            typeText(summaryDiv, content);
          }
        } catch (error) {
          summaryDiv.textContent = `B≈ÇƒÖd po≈ÇƒÖczenia: ${error.message}`;
        }
      }
    }

    function typeText(element, text, i = 0) {
      element.textContent = "";
      function typer() {
        if (i < text.length) {
          element.textContent += text.charAt(i);
          i++;
          setTimeout(typer, 15);
        }
      }
      typer();
    }
  </script></body>
</html>
